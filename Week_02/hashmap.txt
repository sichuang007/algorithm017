hashmap，使用哈希表来存储的，key-value数据结构，它是由数组+链表+红黑树实现的。线程不安全。
它的是实现原理：
	当添加一个元素时，先计算key的hash值，以确定插入的数组中的位置。当同一位置可能会存放多个值时，就会使用链表将数据保存，因此数组存放的是链表。
	当链表长度过长时，链表会转化为红黑树，可提高查询效率。（jdk1.8中链表默认长度为8，当超过时会转化为红黑树）
hashmap 数组的大小初始值为16，当链表数组容量超过初始容量0.75时，数组大小会扩充2倍，旧的链表搬到新的数组中。
 获取机制：
	先计算key的hash值，需找到对应数组的位置，若数组存储数据大于1，则再根据key值，遍历出对应的值。因此要满足hash值和key值相同，才能获取对应的value.
插入原理：
	计算key 的hash值，找到数组对应位置，若数组为空直接存放；若数组该位置已存放数据，判断链表长度，若小于8，在链表后方直接添加新的结点；否则该位置所有数据使用红黑树存放。


	
